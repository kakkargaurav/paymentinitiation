name: Build, Publish and Deploy Australian Payment API

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  REGISTRY: repo.gauravkakkar.au
  IMAGE_NAME: australian-payment-api
  CONTAINER_NAME: australian-payment-api
  PORT: 3232

jobs:
  build-and-publish:
    name: Build and Publish Docker Image
    runs-on: Barebone
    outputs:
      image-tag: ${{ steps.version.outputs.new-tag }}
      image-full: ${{ steps.version.outputs.full-image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Generate version tag
      id: version
      shell: powershell
      run: |
        # Get current version from package.json
        $packageJson = Get-Content package.json | ConvertFrom-Json
        $currentVersion = $packageJson.version
        Write-Host "Current version: $currentVersion"
        
        # Generate new tag based on current version
        if ($currentVersion -eq "1.1.0" -or $currentVersion -eq "1.1") {
          $newTag = "1.11"
        } else {
          # Extract major and minor version
          $versionParts = $currentVersion.Split('.')
          $major = $versionParts[0]
          $minor = $versionParts[1]
          $newMinor = [int]$minor + 1
          $newTag = "$major.$minor$newMinor"
        }
        
        $fullImage = "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$newTag"
        
        Write-Host "New tag: $newTag"
        Write-Host "Full image: $fullImage"
        
        # Set outputs
        Add-Content -Path $env:GITHUB_OUTPUT -Value "new-tag=$newTag"
        Add-Content -Path $env:GITHUB_OUTPUT -Value "full-image=$fullImage"
    
    - name: Build Docker image
      shell: powershell
      run: |
        docker build -t ${{ steps.version.outputs.full-image }} .
        docker tag ${{ steps.version.outputs.full-image }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
    - name: Test Docker image
      shell: powershell
      run: |
        # Start container in background
        docker run -d --name test-container -p 3233:3232 ${{ steps.version.outputs.full-image }}
        
        # Wait for container to start
        Start-Sleep 20
        
        # Basic health check
        Invoke-WebRequest -Uri "http://localhost:3233/health" -UseBasicParsing
        
        # Clean up
        docker stop test-container
        docker rm test-container
        
    - name: Login to Container Registry
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      shell: powershell
      run: |
        $password = "${{ secrets.REGISTRY_PASSWORD }}"
        $username = "${{ secrets.REGISTRY_USERNAME }}"
        $registry = "${{ env.REGISTRY }}"
        Write-Host "Logging into registry: $registry"
        Write-Host "Username: $username"
        
        # Use PowerShell to pipe password to docker login
        $password | docker login $registry --username $username --password-stdin
        
        # If that fails, try with explicit password parameter
        if ($LASTEXITCODE -ne 0) {
          Write-Host "First method failed, trying direct password method..."
          docker login $registry --username $username --password $password
        }
        
    - name: Push Docker image
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      shell: powershell
      run: |
        docker push ${{ steps.version.outputs.full-image }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
    - name: Logout from registry
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      shell: powershell
      run: |
        docker logout ${{ env.REGISTRY }}

  deploy:
    name: Deploy to Production
    runs-on: Barebone
    needs: [build-and-publish]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment: 
      name: Production
      url: http://paymentinitiation.codecrushers.club
    
    steps:
    - name: Deploy to Production Server
      shell: powershell
      run: |
        Write-Host "Deploying ${{ needs.build-and-publish.outputs.image-full }} to production..."
        
        # Note: This step assumes you have SSH access to your production server
        # You'll need to set up SSH keys and server details in GitHub secrets
        
        # For demonstration, showing the commands that would be executed on the server
        Write-Host "Commands that will be executed on production server:"
        Write-Host "1. Login to registry:"
        Write-Host "   docker login ${{ env.REGISTRY }} -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}"
        Write-Host ""
        Write-Host "2. Stop and remove existing container:"
        Write-Host "   docker stop ${{ env.CONTAINER_NAME }} || true"
        Write-Host "   docker rm ${{ env.CONTAINER_NAME }} || true"
        Write-Host ""
        Write-Host "3. Pull new image:"
        Write-Host "   docker pull ${{ needs.build-and-publish.outputs.image-full }}"
        Write-Host ""
        Write-Host "4. Run new container:"
        Write-Host "   docker run -d --name ${{ env.CONTAINER_NAME }}-${{ needs.build-and-publish.outputs.image-tag }} \"
        Write-Host "     -p ${{ env.PORT }}:${{ env.PORT }} \"
        Write-Host "     --restart unless-stopped \"
        Write-Host "     ${{ needs.build-and-publish.outputs.image-full }}"
        Write-Host ""
        Write-Host "5. Verify deployment:"
        Write-Host "   curl -f http://localhost:${{ env.PORT }}/health"

  cleanup:
    name: Cleanup
    runs-on: Barebone
    needs: [build-and-publish, deploy]
    if: always()
    
    steps:
    - name: Clean up Docker cache
      shell: powershell
      run: |
        Write-Host "Cleaning up Docker cache..."
        docker system prune -f --volumes
        Write-Host "Docker cleanup completed."